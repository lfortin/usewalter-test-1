#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

const selfsigned = require('selfsigned');
const app = require('../app');
const debug = require('debug')('usewalter-test-1:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create redirector HTTP server
 */

// redirect from http to https
const redirector = http.createServer((req, res) => {
  res.writeHead(301, { 'Location': `https://${process.env.HOST}:${port}${req.url}` });
  res.end('');
});

redirector.listen(process.env.PORT_REDIRECT);

/**
 * Create HTTPS server.
 */

let pems;
if(process.env.NODE_ENV === 'development') {
  pems = selfsigned.generate(null, { days: 365 });
} else {
  // in production, use valid cert/key for https!
  pems = {
    key: fs.readFileSync(process.env.HTTPS_KEY_PATH),
    cert: fs.readFileSync(process.env.HTTPS_CERT_PATH),
  }
}
const options = {
  key: pems.private,
  cert: pems.cert,
};
const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
